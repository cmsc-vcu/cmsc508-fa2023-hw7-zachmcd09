---
title: Homework 7 - Creating a resume database
author: Zachariah McDonough
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---
## Summary:
- This project involves the creation of a database to capture the collective skills, certifications, and roles of employees in our company. The database is structured into five primary tables: `skills`, `people`, `peopleskills`, `roles`, and `peopleroles`. Each table serves a specific function, from storing employee information to detailing their skills and roles within the company. This database will assist in identifying skill gaps, employee qualifications, and role assignments.


GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-zachmcd09

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false
load_dotenv()
# modify config_map to reflect credentials needed by this program
config = {
    'user': os.getenv("CMSC508_USER"),
    'password': os.getenv("CMSC508_PASSWORD"),
    'host': os.getenv("CMSC508_HOST"),
    'database': os.getenv("HW7_DB_NAME"),
}
# load and store credentials
for key in config.keys():
    flag = False
    if config[key] is None:
        flag = True
        print(f"Missing {config[key]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

def execute(query, connection):
    try:
        sql_query = pd.read_sql(query, connection)
        print(sql_query)
    except Exception as e:
        print(f"An error occurred: {e}")

```

## Overview and description

This project involves the creation of a database to capture the collective skills, certifications, and roles of employees in our company. The database is structured into five primary tables: `skills`, `people`, `peopleskills`, `roles`, and `peopleroles`. Each table serves a specific function, from storing employee information to detailing their skills and roles within the company. This database will assist in identifying skill gaps, employee qualifications, and role assignments.

## Crows-foot diagram

Below is the Crows-Foot Entity-Relationship Diagram (ERD) representing our database. This diagram illustrates how each table is interlinked, showcasing the relationships between employees, their skills, and their roles within the company.

```{mermaid}
erDiagram
    PEOPLE }|--o{ PEOPLESKILLS : "may_have"
    SKILLS }|--o{ PEOPLESKILLS : "required_for"
    PEOPLE }|--o{ PEOPLE_ROLES : "resposible_for"
    ROLES }|--o{ PEOPLE_ROLES : "assigned_to"

    PEOPLE {
        id
        first_name
        last_name
        email
        linkedin_url
        headshot_url
        discord_handle
        brief_bio
        date_joined
    }
    SKILLS {
        id
        name
        description
        tag
        url
        time_commitment
    }
    PEOPLESKILLS {
        id
        skills_id
        people_id
        date_acquired
        date_anticipated
    }
    ROLES {
        id
        name
        sort_priority
    }
    PEOPLE_ROLES {
        id
        people_id
        role_id
        date_role_acquired
    }
```


## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The `people` table contains detailed information about each employee, including their name, contact details, professional links, and the date they joined the company. It serves as a central repository for employee data.

```{python}
#| echo: false
#| eval: true

sql_query = pd.read_sql("""
select
  *
from 
  information_schema.columns
where 
  table_schema='23FA_users_zcmcdonough';
"""
,cnx)

sql_query.head(15)

def show_table( table_name ):
    """ Show a table using Display and Markdown """
    # Note the use of f-strings to embed the variable name.
    query = f"""
    select
        ordinal_position,column_name,column_type,column_key, is_nullable
    from
        information_schema.columns
    where
    table_schema='23FA_users_zcmcdonough'
        and table_name='{table_name}'
    order by 
        ordinal_position;
    """
    sql_query = pd.read_sql( query, cnx )
    display(Markdown(f"**Table: {table_name}** \n"))
    display(Markdown(tabulate(
       sql_query,
       headers=['Pos','Name','Type','Key','IsNull'],
       showindex= False
        )
    )
)  


table_names = cnx.connect().execute(text("show tables"))
for table_name in table_names:
    if table_name[0] == 'people':
        show_table(table_name[0])

```

### Skills table
- The `skills` table catalogues various skills and certifications available or acquired within our company. Each skill is described along with its learning commitment and a URL for more information.


```{python}
#| echo: false
#| eval: true

sql_query = pd.read_sql("""
select
  *
from 
  information_schema.columns
where 
  table_schema='23FA_users_zcmcdonough';
"""
,cnx)

sql_query.head(15)

def show_table( table_name ):
    """ Show a table using Display and Markdown """
    # Note the use of f-strings to embed the variable name.
    query = f"""
    select
        ordinal_position,column_name,column_type,column_key, is_nullable
    from
        information_schema.columns
    where
    table_schema='23FA_users_zcmcdonough'
        and table_name='{table_name}'
    order by 
        ordinal_position;
    """
    sql_query = pd.read_sql( query, cnx )
    display(Markdown(f"**Table: {table_name}** \n"))
    display(Markdown(tabulate(
       sql_query,
       headers=['Pos','Name','Type','Key','IsNull'],
       showindex= False
        )
    )
)  


table_names = cnx.connect().execute(text("show tables"))
for table_name in table_names:
    if table_name[0] == 'skills':
        show_table(table_name[0])

```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

sql_query = pd.read_sql("""
select
  *
from 
  information_schema.columns
where 
  table_schema='23FA_users_zcmcdonough';
"""
,cnx)

sql_query.head(15)

def show_table( table_name ):
    """ Show a table using Display and Markdown """
    # Note the use of f-strings to embed the variable name.
    query = f"""
    select
        ordinal_position,column_name,column_type,column_key, is_nullable
    from
        information_schema.columns
    where
    table_schema='23FA_users_zcmcdonough'
        and table_name='{table_name}'
    order by 
        ordinal_position;
    """
    sql_query = pd.read_sql( query, cnx )
    display(Markdown(f"**Table: {table_name}** \n"))
    display(Markdown(tabulate(
       sql_query,
       headers=['Pos','Name','Type','Key','IsNull'],
       showindex= False
        )
    )
)  


table_names = cnx.connect().execute(text("show tables"))
for table_name in table_names:
    if table_name[0] == 'roles':
        show_table(table_name[0])

```



## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name


```{python}
query = """
SELECT name, tag, description
FROM 23FA_users_zcmcdonough.skills
ORDER BY name;
"""

try:
    df = pd.read_sql(query, cnx)
    print(df)
except Exception as e:
    print(f"An error occurred: {e}")

```


(and here is a sample result from the query)



### List people names and email addresses ordered by last_name
```{python}
query = """
SELECT first_name, last_name, email
FROM 23FA_users_zcmcdonough.people
ORDER BY last_name;
"""

try:
    df = pd.read_sql(query, cnx)
    print(df)
except Exception as e:
    print(f"An error occurred: {e}")

```

### List skill names of Person 1

```{python}
query = """
SELECT s.name
FROM 23FA_users_zcmcdonough.skills s
JOIN peopleskills ps
ON s.id = ps.skills_id
WHERE ps.people_id = 1
"""
try:
    df = pd.read_sql(query, cnx)
    print(df)
except Exception as e:
    print(f"An error occurred: {e}")


```


### List people names with Skill 6
```{python}
query = """
    SELECT p.first_name, p.last_name 
    FROM 23FA_users_zcmcdonough.people p 
    JOIN peopleskills ps
    ON p.id = ps.people_id 
    WHERE ps.skills_id = 6
"""

try:
    df = pd.read_sql(query, cnx)
    print(df)
except Exception as e:
    print(f"An error occurred: {e}")




```

### List people with a DEVELOPER role
```{python}
query = """
SELECT p.first_name, p.last_name
FROM 23FA_users_zcmcdonough.people p
JOIN peopleroles pr ON p.id = pr.people_id
JOIN roles r ON pr.role_id = r.id
WHERE r.name = 'DEVELOPER';
"""


try:
    df = pd.read_sql(query, cnx)
    print(df)
except Exception as e:
    print(f"An error occurred: {e}")


```

### List names and email addresses of people without skills


DELIMITER ;
```{python}
query = """
SELECT p.first_name, p.last_name, p.email
FROM 23FA_users_zcmcdonough.people p
WHERE NOT EXISTS (
    SELECT 1
    FROM 23FA_users_zcmcdonough.peopleskills ps
    WHERE p.id = ps.people_id
);
"""


try:
    df = pd.read_sql(query, cnx)
    print(df)
except Exception as e:
    print(f"An error occurred: {e}")


```

### List names and tags of unused skills


DELIMITER ;
```{python}
query = """
SELECT s.name, s.tag
FROM 23FA_users_zcmcdonough.skills s
WHERE NOT EXISTS (
    SELECT 1
    FROM 23FA_users_zcmcdonough.peopleskills ps
    WHERE s.id = ps.skills_id
);
"""


try:
    df = pd.read_sql(query, cnx)
    print(df)
except Exception as e:
    print(f"An error occurred: {e}")


```

### List people names and skill names with the BOSS role


DELIMITER ;
```{python}
query = """
SELECT p.first_name, p.last_name, s.name AS skill_name
FROM 23FA_users_zcmcdonough.people p
JOIN peopleroles pr ON p.id = pr.people_id
JOIN roles r ON pr.role_id = r.id
JOIN peopleskills ps ON p.id = ps.people_id
JOIN skills s ON ps.skills_id = s.id
WHERE r.name = 'BOSS';
"""


try:
    df = pd.read_sql(query, cnx)
    print(df)
except Exception as e:
    print(f"An error occurred: {e}")


```

### List ids and names of unused roles


```{python}
query = ("""
    select
        last_name, first_name, email 
    from
        people 
    order by
        last_name
    """)

try:
    df = pd.read_sql(query, cnx)
    print(df)
except Exception as e:
    print(f"An error occurred: {e}")


```

# Calling a stored procedure and displaying its result
```{python}
# Name of the stored procedure
stored_procedure_name = "MyStoredProcedure"

# Format the call command
call_command = f"CALL {stored_procedure_name}();"

try:
    # Execute the stored procedure and fetch the results
    result = pd.read_sql(call_command, cnx)
    print(result)
except Exception as e:
    print(f"An error occurred: {e}")

```



## Reflection

- This assignment has given me real world practice with using SQL to create an efficient and strucutred database. I really enjoyed learning how the SQL queries can be a powerful tool for referencing databse compared to methods in traditional databases. The project has given me the opportunity to appreciate the detail that goes into planning and structuring a database as it will be significantly more impactful over the life of the database and for future developers that work on it than the best comments we could include with it. 